Trainer : Neeraj Kumar Reddy
============================

Day 1 | 26.10.23 :
------------------

    .3-tier architecture
        .Browser   | HTML,CSS,JS
        .Server    | C/Cpp , Java , Python
        .Database  | SQL, NoSQL

    .JS Variables
        .var 
        .let 
        .const 

    .JS Data types
        .string 
        .numbers
        .null
        .boolean
        .undefined

    .JS Data structures
        .Array
        .object    | { key : value }
            .key is internally stored as string 
            .if key includes special characters, explicitly cast to string

Day 2 | 27.10.23 :
------------------

    .Array of Objects

    .Setting up VS Code for JS
        .code runner extension
    .Installing Node JS 

    .JSON          | Java Script Object Notation
        .for parsing and transmitting data

        .supports JS datatypes except 'undefined'
        .supports data structures like arrays and objects

        .key should be bounded by quotation marks(" ")
        .loops and conditional statements are not allowed

        .ObjectID
            .acts as primary key
            .12 byte hexadecimal string 
                .4 byte - Timestamp
                .5 byte - Random Value
                .3 byte - Increment

    .Database (storage container for storage of data in systematic/organised manner)
        .CRUD operations
            .Create
            .Read
            .Update
            .Delete

Day 3 | 28.10.23 :
------------------

    .MongoDB
        .Schema less | Unstructured | NoSQL
        .Platform independent
        .Its a Distributed Database | supports horizontal scaling

        .Features
            .Ad-hoc queries
            .Indexing
            .Replication
            .Load balancing
            .File storage
            .Aggregation
            .Server-side JS execution
            .Capped collections
            .Transactions
        
    .SQL vs NoSQL
        .verticle vs horizontal scaling  | Increase size of system by - upgrade vs distributed system
        .schema vs not schema based
        .RDBMS vs no RDBMS support
        .small vs large data 
        
        .ACID vs no ACID property support
            .Atomicity      : The entire transaction occurs at once else doesnt occur at all
            .Consistency    : DB must be consistent before and after transaction
            .Isolation      : Multiple transaction ocuur independently without interference
            .Durability     : Changes of successful transaction occur even if system failure occurs

        .complex query,join vs no query,join support
        .table vs document support

        .eg : sql, mysql vs MongoDB, Amazon
    
    .NoSQL DB types
        .Document DB        
            .JSON , BSON , XML 
            .MongoDB
        .Key-value DB 
            .key-value pairs | no objects
            .Amazon
        .Graph DB 
            .distributed storage
        .Column oriented DB
            .dynamically modified columns

Day 4 | 30.10.23 : 
------------------

    .Terminologies
        .table  -   collection
        .row    -   document
        .column -   property

    .Advantages of MongoDB
        .Schemaless
        .platform independent
        .supports horizontal scaling

    .Disadvantages of MongoDB
        .Doesnt support ACID properties
        .requires more space
        .cant fetch from multiple collections at a time 
        .doesnt support join
        .no auto-cleanup of disk space 

    .Basic commands
        .enter console
            .mongosh
        .clear console
            .cls 
            .console.clear()
            .control + l | ( ^ + l )
        .see current database 
            .db 
        .list databases
            .show dbs
        .list collections
            .show collections
        .check if collection is capped  
            .db.collectionName.isCapped() | true if capped

    .CRUD operations
        .Create
            .Create a database  
                .syntax : use databaseName
            .Create a collection
                .Uncapped collection
                    .explicit method
                        .syntax : db.createCollection("CollectionName")
                    .implicit method
                        .syntax : db.collectionName.insertOne({})
                .Capped collection
                    .syntax : db.createCollection("CollectionName",
                                                  { capped : true, 
                                                    size :<inBytes>,
                                                    max : <noOfDocuments> 
                                                    })
            .Create a document 
                .Single insertion
                    .syntax : db.collectionName.insertOne({...})
                .Multiple insertion
                    .syntax : db.collectionName.insertMany([{...},...])

        .Delete
            .Delete a collection
                .syntax : db.collectionName.drop()
            .Delete a database
                .syntax : db.databaseName.drop()            | delete empty database 
                .syntax : db.dropDatabase("databaseName")   | delete entire database, including all collections
        
Day 5 : 31.10.23 : 
------------------

    .Read   
        .find()
            .syntax : db.collectionName.find(query,projection,options)
            .query - condition
            .returns all documents

        .findOne()
            .syntax : db.collectionName.findOne(query,projection,options)
            .returns only one document

        .Using projection
            .{key : bool}
            .displays keys with bool value 1

        .Access Nested object
            .use dot(.) to access 
            .bound key within quotation(" ") | dot is special character

        .Using lamda functions
            .syntax : db.collectionName.find().forEach(lamdaExp)
            .lamdaExp - eg: x=>console.log(x)

    .Import JSON File
        .syntax : mongoImport fileName.json --db=databaseName --collection=collectionName --jsonArray

Day 6 : 01.11.23 : 
------------------

    .Operators
        .Query and Projection Operators
            .Query Operators
                .Comparison
                    .  ==  - $eq
                    .  !=  - $ne 
                    .  >   - $gt
                    .  <   - $lt
                    .  >=  - $gte
                    .  <=  - $lte
                    . $in  - check for equality in list
                    . $nin - check for inequality in list

                    .syntax : {key : {$xx: value}}

Day 7 : 02.11.23 :
------------------

                .Logical
                    .$and
                    .$or 
                    .$nor
                        .syntax : { $xx :[{query1},{query2},...] }

                    .$not 
                        .syntax : { $not : {query} }

                .Array 
                    .$all
                        .syntax : {$all:[value1,value2,...]}
                    .$elemMatch
                        .syntax : {$elemMatch:{query1,query2,...}}
                    .$size
                        .syntax : {$size:numberOfValues}

Day 8 : 03.11.23 : 
------------------

            .Projection Operators
                .$
                    .return first match 
                    .syntax : db.collectionName.find({Query},{arrayName:{condition}},{"arrayName.$":1})

                .$elemMatch
                    .db.collectionName.find({Query},{arrayName:{$elemMatch:{filter1,filter2,...}}})
                
                $slice
                    .syntax : db.collectionName.find({Query},{arrayName:{$slice:endIndex}})
                    or
                    .syntax : db.collectionName.find({Query},{arrayName:{$slice:[startIndex,numberOfValues]}})

    .Update
        .updateOne()
            .syntax : db.collectionName.updateOne(filter,update,option)
            .requires atomic Operators
                .$set
                .upsert // option 

                .timestamp
                    .syntax : db.collectionName.updateOne/Many(filter,{update, $currentDate:{keyName : true}})
        .updateMany()

Day 9 : 04.11.23 :
------------------

    .Delete
        .deleteOne()
            .syntax : db.collectionName.deleteOne(filter)

        .deleteMany()
            .syntax : db.collectionName.deleteMany(filter)
            .if no filter is passed, all documents are deleted

    .Operators
        .update operators 
            .$inc 
                .increment value by specified amount
                .syntax : {$inc:{key: value}}
                .if key doesnt exist, it creates new key:value 

            .$min 
                .syntax : {$min:{key:value}}

            .$max 
                .syntax : {$max:{key:value}}

            .$mul
                .syntax : {$mul:{key:value}}

            .$rename
                .syntax : {$rename:{key:newKey}}

            .$set 
                .syntax : {$set:{key:value}}

            .$unset 
                .syntax : {$unset:{key:""}}

            .$
                .update first match from array 

            .$[]
                .update multiple elements of array

Day 10 : 06.11.23 : 
-------------------

    .arrayFilters : 
        .$[identifier]
            .syntax : db.collectionName.updateOne/Many({},
                                                        {updateOperator:{"key.$[identifier]":newValue}},
                                                        {arrayFilters : {identifier:{condition}}} )

    .$push
        .syntax : {$push:{key:value}}
        .append element to array

    .$pull
        .syntax : {$pull:{key:value}}

    .$pop 
        .syntax : {$pop:{key:-1/1}}
        .-1 - first element
        . 1 - last element

    .$addToSet
        .syntax : {$addToSet:{key:value}}
        .appends new element if it doesnt exist in array

//learn GridFS
//learn geospacial operations

    .Bulk operations
        .bulkWrite
            .syntax : db.collectionName.bulkWrite([operation1,operation2,...])
            .insertMany() is unsupported
            .supported operations
                .insertOne
                .updateOne
                .updateMany
                .deleteOne
                .deleteMany
                .replaceOne
                    .syntax : db.collectionName.replaceOne(filter,replacement)

    .Cursors (used with find())
        .count()
            .syntax : find().count()
        .forEach()
            .syntax : find().forEach(function)
        .limit()
            .specify the maximum number of documents to returned
            .syntax : find().limit(int)
        .sort()
            .syntax : find().sort({key:-1/1})
            .-1 - descending order
            . 1 - ascending order

Day 11 : 07.11.23 :
-------------------

    .Aggregation
        .syntax : db.collectionName.aggregate([{stage1},{stage2},...])

        .SQL vs MongoDB
            .Where - $match
            .Group by - $group 
            .Having - $match 
            .Order by - $sort 

        .$match
            .syntax : db.collectionName.aggregate([{$match:{query}}])
            .equivalent to db.collectionName.find({query})
            .must be first stage of aggregatio pipeline
        $project 
            .syntax : db.collectionName.aggregate([{$project:{key:bool}}])
            .equivalent to db.collectionName.find({},{key:bool})
        .$sort
            .syntax : db.collectionName.aggregate([{$sort:{key:-1/1}}])
            .-1 - descending order
            . 1 - ascending order 
        .$limit
            .syntax : {$limit:posIntValue}
            .limits number of documents passed to next stage
        .$group
            .syntax : db.collectionName.aggregate([{$group:{_id:"$key", newKey:{$xx:value}}}])
            ._id - group by key
            .newKey - key in group 
    .Aggregation pipeline operators 
        .$push
        .$count
        .$sum
        .$max
        .$min
        .$avg
        .$concat 
        .$cond
        .$first
        .$last
        .$ceil 
        .$floor 
        .$add
        .$multiply
        .$divide
        .$subtract
        .$mod 

Day 12 : 08.11.23 : 
-------------------

        .$count
            .syntax : newKey:{$count:{}}
            .results in key:count(groupMembers)

        .$max
            .syntax : newKey:{$max:key}
            .find max value corresponding to key 

        .$min
            .syntax : newKey:{$min:key}
            .find min value corresponding to key

        .$avg
            .syntax : newKey:{$avg:key}
            .find  avg of values corresponding to key

Day 13 : 09.11.23 :
-------------------
        .$concat 
        .$add
        .$multiply
        .$divide
        .$subtract
        .$mod 
        .$addToSet

Day 14 : 10.11.23 :
-------------------

        .$cond
            .syntax : {$cond:{if:<boolean exp>,then:<true-case>,else:<false-case>}}

        .$switch
            .syntax : $switch:{branches:[{case:<exp>,then:<exp>},...],default:<exp>}

    Schema
        .its a json object
        .cant be created for Admin,Local,Config
        .lets you create validation rules for fields
        .should be mentioned at the time of creation 

        .syntax : db.createCollection("collectionName",{
                        validator:{
                            $jsonSchema:{
                                bsonType:"object",
                                required:[requiredKey1,requiredKey2,...],
                                properties:{
                                    requiredKey1:{
                                        bsonType:dataType,
                                        description:errorMsg
                                    },
                                    requiredKey2:{
                                        bsonType:dataType
                                        description:errorMsg
                                    }
                                }
                            }
                        }
                })
